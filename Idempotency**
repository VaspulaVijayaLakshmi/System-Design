What Does “Idempotent” Mean?

Idempotent means:
Performing the same operation multiple times has the same effect as performing it once.



Analogy:

If you press the “Mute” button once or five times —
the outcome is still “muted”.
That’s idempotence.

But pressing “Increase Volume” multiple times increases it each time —
not idempotent.




Idempotent APIs in HTTP

Some HTTP methods are designed to be idempotent by spec:

```
HTTP                  Method	             Idempotent?	Why
GET	                   Yes	               Doesn’t change state
PUT                    Yes	               Replaces resource (same input = same state)
DELETE	               Yes	               Deleting again has no effect
POST	                 No	                 Creates a new resource each time (can cause duplicates)
```



Non-Idempotent:

```
POST /payments
Body: { "amount": 100, "userId": 5 }

Call it twice → user might get charged twice 
```



Idempotent:
```
PUT /payments/{paymentId}
Body: { "amount": 100, "userId": 5 }


Call it twice → only one payment with paymentId created/updated.
```








How to Design Idempotent APIs (esp. POSTs)

Even POST can be made idempotent using a unique key.

 1️⃣ Idempotency Key

Client generates a unique idempotency-key for each logical request.

```
POST /payments
Headers: Idempotency-Key: abcd-1234
Body: { "amount": 100, "userId": 5 }
```



2️⃣ Check for Duplicate Requests

Server stores (key → result) mapping.
If the same key is sent again → return cached response, don’t reprocess.
Stripe, PayPal, and AWS APIs use this approach.



Check for Duplicate Requests
Before processing, check DB for an existing transaction/order ID.
If found → skip processing, just return success.








Problem	                                Without Idempotency	               With Idempotency

Network retry	                           Might process twice	                Safe to retry
Client resend	                           Creates duplicates	                   Safe
Server crash mid-request	                Reprocessing causes duplicates	       Safe recovery
Exactly-once behavior (like Kafka)	         Impossible	               Achievable

Idempotency is the foundation for safe retries and exactly-once semantics in distributed systems.
