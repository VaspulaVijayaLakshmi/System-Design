CAPACITY ESTIMATION : 


10M users

SO read to write ratio - 1:10

SO Daily Active USers (DAU) : 10M
And each user access 10 urls - 10M * 10 - 100M urls accessed per day

CACHE - Frequntely Accessed Urls

Writes - 1M - 1KB EACH   1024 bytes
so 1M - 1M*1KB per day

Total Memory per year - 365*1M*1KB 


__________________



Functional Requirements:

-> Users should be able to submit a long URL and receive a shortened version.

Optionally, users should be able to specify a custom alias for their shortened URL.
Optionally, users should be able to specify an expiration date for their shortened URL.


-> Users should be able to access the original URL by using the shortened URL.

_____________________

NF requiremnets : 

-> Avaiabilty
-> Consistency


this is Read heavy SYstem - then number of uniues url generated is way less than the no.of reads
So availability is IMP.

-> Scalable

-> Reliable - each short url should be mapped to one long url

-> replication and redundancy

___________________


SImple design 


USER -> LB -> URL SHORTENER SERVICE ->  DB

           -> Cache 


DB mapping:
short url -> long url


We need a random url geenrator  - which geenrated unique random letter.
Cache to store frequently Accessed urls


____________________


APIs :


Give long url to generate a short url

POST /urls
{
  "long_url": "https://www.example.com/some/very/long/url",
  "custom_alias": "optional_custom_alias",
  "expiration_date": "optional_expiration_date"
}

->
{
  "short_url": "http://short.ly/abc123"
}


Returns a shortened url


____


GET:  Given a short url - return the long url

GET /{short_code}
-> HTTP 302 Redirect to the original long URL

_____________________




validate the long URL - This is to ensure that the URL is valid (there's no point in shortening an invalid URL)
and that it doesn't already exist in our system
(we don't want collisions).


301 - permanent Redirect
Browsers typically cache this response, meaning subsequent requests for the same short URL might go directly to the long URL, bypassing our server.


302 - temporary Redirect - browser dont cache

302 is better option because, 301 - browsers cache but these links have expirations


__________________


Database - SQL/ NO SQL

NOSQL

_____________________



-> How to generate this 6-10 Short length random string?

Hash Function

SHA1/MD5 alogrothims



-> How to shard the DB? 

Range Based partitoning

We can have ???




-> Latancies - we can pregenerate URLS befor hand instead of generating at run time and use it thus saving 
            latencies and once we exhaust them we can again generate another set.

            Cache







