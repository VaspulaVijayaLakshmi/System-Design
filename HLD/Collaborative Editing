https://systemdesignschool.io/problems/google-doc/solution


Single-user CRUD Operations in the Browser: Users can create, read, update, and delete documents directly in their web browser.


In a typical cloud storage system, the URL structure is like this:

https://s3.amazonaws.com/bucket-name/user-id/document-id





However, in our collaborative editing system, we do not want a hierarchical URL structure because

Since the file is meant to be shared with others, we do not want to expose the folder structure to the users.


Therefore, we should use a flat structure. For example:

Google Docs: https://docs.google.com/document/d/1Ss4s93AGpdksZp1X3Gjzy717LCv8xY49G_PewUwmZ5A




Globally Unique: The ID should be unique across the entire system. No two documents should have the same ID ever.




How to Store Documents?


For an document, we need to store the document metadata and the document content.

Document Metadata
The document metadata includes:

Document title, author, permissions, creation and last modified timestamps.
Access control data (e.g., roles like owner, editor, viewer).
Versioning pointers, references to document snapshots, and other attributes.






Fast queries and filter: For example, we want to query all documents created by a specific user or retrieving documents the user has permission to edit.

Transactional Consistency: Operations like adding or updating metadata (e.g., changing permissions or titles) should be atomic.
                          It either succeeds completely, committing all changes, or fails completely,






Based above requirements, we should use a relational database to store the document metadata because:

Atomicity in ACID 
DATa interigrity







Document content tends to be larger and less structured than metadata, especially for text documents, images, and other rich media. 
Additionally, the system may need to store multiple snapshots or versions of the content for version history, which increases storage needs over time.

Cloud storage services (e.g., AWS S3, Google Cloud Storage) are designed to handle massive amounts of unstructured data





Synchronizing Document State
To support multi-user collaborative editing, we need to solve the following problems:

How to synchronize the document state for different users?
How to handle conflicts when multiple users edit the same document?
First, let's assume there is no conflict in editing between different users. 
Imagine different users are editing different parts of the document independently, 




WEBSOCKETS for real time editing.

Client 1 Sends Edit: Client 1 sends an edit to the WebSocket Service over its WebSocket connection.
WebSocket Service Adds Edit to Queue: The WebSocket Service places the edit in the message broker queue (e.g., Kafka, RabbitMQ, or Redis Pub/Sub). This decoupling allows the WebSocket Service to quickly move on to handling other incoming messages.
Document Service Consumes Edit: The Document Service, acting as a consumer, reads the edit from the queue.
Document Service Processes and Persists Edit: The Document Service validates, processes, and persists the edit in the database.
Notify WebSocket Service: After updating the database, the Document Service can either:
Notify the WebSocket Service (possibly through the queue) that the update is complete.
Optionally, send the updated document state to the WebSocket Service for broadcasting.
WebSocket Service Broadcasts Update: Upon receiving the update or confirmation, the WebSocket Service broadcasts the updated state to all connected clients, including Client 1, Client 2.




Handling conflicts
Last-Write-Wins



How to implement document version history?
Document version history can be implemented using several strategies:

1. Snapshot-Based Versioning


How to prevent server overload from frequent edits?
Several strategies can be employed to manage server load:

1. Client-Side Batching
Instead of sending each edit to the server immediately, the client can batch the edits and send them to the server in a batch.

2. Rate Limiting

3. Caching - freq accessed doc





How to handle offline editing?



Sync Process: 


Detect online status
Upload pending changes
Fetch remote changes
Resolve conflicts
Update local state






